var selfws = require('../webservice/selfwebservice')
var following = require('../core/following')
var utilities = require('../core/utilities')
var privBypass = require('./privbypass')
var config = require('../core/config')
var logger = require('../core/logger')

module.exports = {
	isValid : function(usuario, model, crud, callback) {
		usuario.body = { }

		following.makeObjFollower(usuario.body, model)
		privBypass.addNew(config.getConfiguration().getUserEntity(), 'list', model)

		return selfws.get(config.getConfiguration().getUserEntity(), 'list', usuario, function(res) {
			if (res.error != undefined)
				return callback(res)
			else {
				res = JSON.parse(res)
				if (res.length > 0) {
					return logger.saveAccessLog(usuario, 'Login e senha validados. Usuário : ' + usuario.local.email + 
								    ' Id: ' + res[0]._id, function() {

						return callback(res[0])
					})
				} else {
					return logger.saveErrorLog(usuario, 'Login e senha inválidos. Usuário : ' + usuario.local.email, 
								   function() {
						return callback(require('../error/error').dispatch(5, undefined))
					})
				}
			}
		})
	},
	isSuficient : function(obj, model, crud, usuario, callback, objs) {

		if (usuario == null) {
			return logger.saveAccessLog(obj, 'Privilégio autorizado por falta de parâmetro usuario para entidade ' + 
						    model, function() {
				return callback(obj)
			})
		}
		
		if (utilities.isArrayInsideArray(privBypass.getAll(), [model, crud, following.getCurrent(obj)])) {
			return logger.saveAccessLog(obj, 'Privilégio autorizado por bypass para a entidade ' + model, function() {
				return callback(obj)
			})
		}

		var modelModule = require.main.require('./model/' + model)

		var allowed = usuario.admin

		if ((crud == 'list') && (!allowed)) {

			var tmpReturn = []

			objs.forEach(function(item) {
				if (eval('modelModule.getPriv().' + crud) != undefined) {
					if (eval('modelModule.getPriv().' + crud + '(item, usuario)'))
						tmpReturn.push(item)
				} else {
					if (modelModule.getPriv().standard(item, usuario)) {
						tmpReturn.push(item)
					}
				}
			})

			tmpReturn.isList = true
			return callback(tmpReturn)
		}

		if (!allowed) {
			if (modelModule.getPriv != undefined) {
				if (eval('modelModule.getPriv().' + crud) != undefined) {
					allowed = eval('modelModule.getPriv().' + crud + '(obj, usuario)')
				} else if ((modelModule.getPriv().standard != undefined) && (crud != 'list')) {
					allowed = modelModule.getPriv().standard(obj, usuario)
				}
			}
		}
		if (allowed) {
			return logger.saveAccessLog(obj, 'Privilégio autorizado para entidade ' + model + ' Usuário : ' + 
					            usuario.local.email + ' Password (hash) ' + usuario.local.password, function() {
				return callback(obj)
			})
		}

		return logger.saveErrorLog(obj, 'Privilégio negado para entidade ' + model, function() {
			return callback(require('../error/error').dispatch(11, undefined))
		})
	}
}
