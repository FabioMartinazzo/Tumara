var following = require('./following')

var Utilities = {
	getCurrentDate : function(withTime) {
		var date = new Date()

		var hour = date.getHours()
		hour = (hour < 10 ? "0" : "") + hour

		var min  = date.getMinutes()
		min = (min < 10 ? "0" : "") + min

		var sec  = date.getSeconds()
		sec = (sec < 10 ? "0" : "") + sec

		var year = date.getFullYear()

		var month = date.getMonth() + 1
		month = (month < 10 ? "0" : "") + month

		var day  = date.getDate()
		day = (day < 10 ? "0" : "") + day

		tmpData = day + "/" + month + "/" + year

		if (withTime)
			tmpData += " " + hour + ":" + min + ":" + sec

		return tmpData
	},
	getSeparator : function() {
		return ' - '
	},
	getAccessIp : function(req) {
		if ((req == undefined) || (req.connection == undefined))
			return 'ImpossÃ­vel buscar IP'

		return req.connection.remoteAddress
	},
	getFollower : function(req) {
		if (req == undefined)
			return 'undefined'

		var tmpReturn = following.getCurrent(req.body)
		return (tmpReturn == undefined) ? 'undefined' : tmpReturn
	}
}

module.exports = {
	isArrayInsideArray : function(array, arrayToCheckInside) {
		for (var n = 0; n < array.length; n++) {
			var tempReturn = false
			for (var x = 0; x < arrayToCheckInside.length; x++) {
				tempReturn = ((array[n][x] == undefined) || (array[n][x] == arrayToCheckInside[x]))

				if (!tempReturn)
					x = arrayToCheckInside.length
			}
			if (tempReturn) 
				return true
		}
		return false
	},
	getValueByIndex : function(array, value, indexName, valueName) {
		for(var n = 0; n < array.length; n++) {
			var indexValue = eval('array[n].' + indexName)
			if (indexValue == value)
				return eval('array[n].' + valueName)
		}
	},
	getCurrentDate : function(withTime, prefixSeparator) {
		var prefix = (prefixSeparator) ? Utilities.getSeparator() : ''
		return prefix + Utilities.getCurrentDate(withTime)
	},
	getAccessIp : function(req, prefixSeparator) {
		var prefix = (prefixSeparator) ? Utilities.getSeparator() : ''
		return prefix + Utilities.getAccessIp(req)
	},
	getFollower : function(req, prefixSeparator) {
		var prefix = (prefixSeparator) ? Utilities.getSeparator() : ''
		return prefix + Utilities.getFollower(req)
	},
	lineBreak : function() {
		return '\n'
	}
}
