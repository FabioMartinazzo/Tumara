var config = require('./config')
var utilities = require('./utilities')
var selfws = require('../webservice/selfwebservice')
var privilege = require('../privilege/privilege')
var privByPass = require('../privilege/privbypass')
var following = require('./following')
var rollback = require('./rollback')
var logger = require('./logger')
var clone = require('clone')

var Crud = {
	model : null,
	app : null, 
	modelObj : null,
	checkerObj : null, 

	init : function(model, checker) {
		this.model = model
		this.app = config.getConfiguration().getApp()

		this.modelObj = config.getConfiguration().getPersistence().getModel(model)

		if (checker != null)
			this.checkerObj = checker.getChecker()

		return clone(this)
	},

	isValidProperty : function(property) {
		return ((property != 'usuario') && (property != 'senha') && (property != 'follower'))
	},

	assignPropertys : function(obj, webObj) {
		for (var property in webObj) {
                        if (webObj.hasOwnProperty(property)) {
				if (this.isValidProperty(property))
	                                obj[property] = webObj[property]
                        }
                }
	},

	doTheSave : function(codeError, req, res, obj, that, usuario, crud) {

		that.assignPropertys(obj, req.body)

		var that = this

		return obj.save(function (err) {
			if (!err) {
				return privilege.isSuficient(obj, that.model, crud, usuario, function(resPriv) {
					logger.saveAccessLog(req, 'Entidade ' + that.model + 'salva com sucesso.')
					return res.send(resPriv)
				})
			} else {
				logger.saveErrorLog(req, 'Falha ao salvar um elemento da entidade ' + that.model + ' Erro : ' + err)
				if (rollback.getRollback(req.body) == undefined) 
					return res.send(require('../error/error').dispatch(codeError, err))

				return selfws.get(rollback.getRollback(req.body).getEntity(), 'delete', 
				       { usuario : rollback.getRollback(req.body).getUsuario(), senha : rollback.getRollback(req.body).getSenha(), 
					 follower : following.getCurrent(req.body) }, 
					function(resWeb) {
						if (resWeb.error == undefined) {
							logger.saveAccessLog(req, 'Rollback da entidade ' + that.model + ' de id: ' + 
									     rollback.getRollback(req.body).getId() + ' executado com sucesso.')
							return res.send(require('../error/error').dispatch(codeError, err))
						}
						logger.saveErrorLog(req, 'Não foi possível executar um rollback na entidade ' + 
									  rollback.getRollback(req.body).getEntity() + ' de id: ' + 
									  rollback.getRollback(req.body).getId() + ' Erro : ' + 
									  resWeb.error)
						return res.send(require('../error/error').dispatch(codeError, resWeb))
				}, rollback.getRollback(req.body).getId())
			}
		})
	},

	doDelete : function(codeError, req, res, obj, that, usuario) {
		return obj.remove(function (err) {
			if (!err) {
				return privilege.isSuficient(obj, that.model, 'delete', usuario, function(resPriv) {
					logger.saveAccessLog(req, 'Entidade ' + that.model + 'deletada com sucesso.')
					return res.send({ success : 1 })
				})
			} else {
				logger.saveErrorLog(req, 'Falha ao deletar um elemento da entidade ' + that.model + ' Erro : ' + err)
				return res.send(require('../error/error').dispatch(codeError, err))
			}
		})
	},

	getTheList : function(codeError, obj, res, usuario) {
		following.removeFollower(obj)

		var that = this

		return this.modelObj.find(obj, function (err, objs) {
			if (!err) {
				return privilege.isSuficient(objs, that.model, 'list', usuario, function(resPriv) {
					logger.saveAccessLog(undefined, 'Entidade ' + that.model + 'listada com sucesso.')
					return res.send(resPriv)
				})
			} else {
				logger.saveErrorLog(undefined, 'Falha ao buscar listagem da entidade ' + that.model + ' Erro : ' + err)
				return res.send(require('../error/error').dispatch(codeError, err))
			}
		})
	},

	getListOne : function(codeError, req, res, usuario) {
		var that = this
		return this.modelObj.findById(req.params.id, function (err, obj) {
			if (!err) {
				following.makeObjFollower(obj, following.getCurrent(req.body))
				return privilege.isSuficient(obj, that.model, 'listone', usuario, function(resPriv) {
					logger.saveAccessLog(req, 'Entidade ' + that.model + 'listada um elemento com sucesso.')
					return res.send(resPriv)
				})
			} else {
				logger.saveErrorLog(req, 'Falha ao buscar um elemento da entidade ' + that.model)
				return res.send(require('../error/error').dispatch(codeError, err))
			}
		})
	},

	privWrapper : function(req, res, crud, callback) {

		logger.saveAccessLog(req, 'Verificando login e senha')

		var usuario = (req.body.usuario == undefined) ? '' : req.body.usuario
		var senha = (req.body.senha == undefined) ? '' : req.body.senha

		if (utilities.isArrayInsideArray(privByPass.getAll(), [this.model, crud, following.getCurrent(req.body)])) {
			logger.saveAccessLog(req, 'Login e senha desnecessários para este acesso')
			return callback()
		}

		var that = this

		return privilege.isValid({ local : { email : usuario, password : senha }, follower : following.getCurrent(req.body)}, 
					 that.model, crud, function(resPriv) {
			if (resPriv.error != undefined) {
				return res.send(require('../error/error').dispatch(1, resPriv))
			}

			return callback(resPriv)
		})
	},

	getOnePreparedWrapper : function(req, res, callback, codeError, usuario, crud) {
		var postData = { usuario : req.body.usuario, senha : req.body.senha, follower : following.getCurrent(req.body) }

		var that = this
		return selfws.get(this.model, 'listone', postData, function(resWeb) {
			resWeb = JSON.parse(resWeb)

			if (resWeb.error != undefined) 
				return res.send(require('../error/error').dispatch(8, resWeb)) 

			return that.modelObj.findById(resWeb._id, function (err, obj) {
				return callback(codeError, req, res, obj, that, usuario, crud) 
			})
		}, req.params.id)
	},

	updateWrapper : function (req, res) {
		return this.getOnePreparedWrapper(req, res, this.doTheSave, 7, usuario)
	},

	deleteWrapper : function (req, res, usuario) {
		return this.getOnePreparedWrapper(req, res, this.doDelete, 10, usuario) 
	},

	makeCreate : function() {
		var that = this

		this.app.post(config.getConfiguration().getPrefix() + this.model + '/create/', function (req, res) { 

			logger.saveAccessLog(req, 'Tentativa de acesso a criação de entidade ' + that.model)

			return that.privWrapper(req, res, 'create', function(usuario) {

				if ((that.checkerObj == null) || (that.checkerObj.checkCreate == undefined)) 
					return that.doTheSave(3, req, res, new that.modelObj(), that, usuario, 'create')

				following.makeObjFollower(req.body, that.model)

				return that.checkerObj.checkCreate(req.body, function(resCheck) {
					logger.saveAccessLog(req, 'Verificando regras de negócio para entidade ' + that.model + ' crud create')
					if ((resCheck != undefined) && (resCheck.error != undefined)) {
						logger.saveErrorLog(req, 'Erro nas regras de negócio para entidade ' + that.model + ' crud create')
						return res.send(require('../error/error').dispatch(2, resCheck)) 
					}

					logger.saveAccessLog(req, 'Passou nas regras de negócio para entidade ' + that.model + ' crud create')
					return that.doTheSave(3, req, res, new that.modelObj(), that, usuario, 'create')
				})
			})
		})
	},

	makeList: function() {
		var that = this

		this.app.post(config.getConfiguration().getPrefix() + this.model + '/list', function (req, res){

			logger.saveAccessLog(req, 'Tentativa de acesso a listagem de entidade ' + that.model)

			return that.privWrapper(req, res, 'list', function(usuario) {

				var obj = {}
				that.assignPropertys(obj, req.body)

				if ((that.checkerObj == null) || (that.checkerObj.checkList == undefined))
					return that.getTheList(6, obj, res, usuario)

				following.makeObjFollower(obj, that.model)

				return that.checkerObj.checkList(obj, function(resCheck) {
					logger.saveAccessLog(req, 'Verificando regras de negócio para entidade ' + that.model + ' crud list')
					if ((resCheck != undefined) && (resCheck.error != undefined)) {
						logger.saveErrorLog(req, 'Erro nas regras de negócio para entidade ' + that.model + ' crud list')
						return res.send(require('../error/error').dispatch(2, resCheck))
					}

					logger.saveAccessLog(req, 'Passou nas regras de negócio para entidade ' + that.model + ' crud list')
					return that.getTheList(6, obj, res, usuario)
				})
			})
		})
	},

	makeUpdate : function() {
		var that = this

		this.app.post(config.getConfiguration().getPrefix() + this.model + '/update/:id', function (req, res){

			logger.saveAccessLog(req, 'Tentativa de acesso a atualização de entidade ' + that.model)

			return that.privWrapper(req, res, 'update', function(usuario) {
				if ((that.checkerObj == null) || (that.checkerObj.checkUpdate == undefined))
					return that.updateWrapper(req, res)
				
				following.makeObjFollower(req.body, that.model)

				return that.checkerObj.checkUpdate(req.body, function(resCheck) {
					logger.saveAccessLog(req, 'Verificando regras de negócio para entidade ' + that.model + ' crud update')
					if ((resCheck != undefined) && (resCheck.error != undefined)) {
						logger.saveErrorLog(req, 'Erro nas regras de negócio para entidade ' + that.model + ' crud update')
						return res.send(require('../error/error').dispatch(2, resCheck))
					}
				
					logger.saveAccessLog(req, 'Passou nas regras de negócio para entidade ' + that.model + ' crud update')
					return that.updateWrapper(req, res)
				})
			})
		})
	},

	makeListOne : function() {
		var that = this

		this.app.post(config.getConfiguration().getPrefix() + this.model + '/:id', function (req, res){
		
			logger.saveAccessLog(req, 'Tentativa de acesso a listagem única de entidade ' + that.model)

			return that.privWrapper(req, res, 'listone', function(usuario) {
				if ((that.checkerObj == null) || (that.checkerObj.checkListOne == undefined)) 
					return that.getListOne(9, req, res, usuario) 
				
				following.makeObjFollower(req.body, that.model)

				return that.checkerObj.checkListOne(req.body, function(resCheck) {
					logger.saveAccessLog(req, 'Verificando regras de negócio para entidade ' + that.model + ' crud listone')
					if ((resCheck != undefined) && (resCheck.error != undefined)) {
						logger.saveErrorLog(req, 'Erro nas regras de negócio para entidade ' + that.model + ' crud listone')
						return res.send(require('../error/error').dispatch(2, resCheck))
					}

					logger.saveAccessLog(req, 'Passou nas regras de negócio para entidade ' + that.model + ' crud listone')
					return that.getListOne(9, req, res, usuario)
				})
			})
		})
	},

	makeDelete : function() {
		var that = this

		this.app.post(config.getConfiguration().getPrefix() + this.model + '/delete/:id', function (req, res){
			
			logger.saveAccessLog(req, 'Tentativa de acesso a remoção de entidade ' + that.model)

			return that.privWrapper(req, res, 'delete', function(usuario) {

				if ((that.checkerObj == null) || (that.checkerObj.checkDelete == undefined))
					return that.deleteWrapper(req, res, usuario)
				
				following.makeObjFollower(req.body, that.model)

				return that.checkerObj.checkDelete(req.body, function(resCheck) {
					logger.saveAccessLog(req, 'Verificando regras de negócio para entidade ' + that.model + ' crud delete')
					if ((resCheck != undefined) && (resCheck.error != undefined)) {
						logger.saveErrorLog(req, 'Erro nas regras de negócio para entidade ' + that.model + ' crud delete')
						return res.send(require('../error/error').dispatch(2, resCheck))
					}
					logger.saveAccessLog(req, 'Passou nas regras de negócio para entidade ' + that.model + ' crud delete')

					return that.deleteWrapper(req, res, usuario)
				})
			})
		})
	}

}

var cruds

module.exports = {
	makeCrud : function(model, isUserEntity) {
		var checkerObj
		try {
			var checkerModule = require.main.require('./model/' + model)
		} catch(e) {
			checkerModule = null
		}

		if (cruds == undefined)
			cruds = []

		if (isUserEntity)
			config.setUserEntity(model)
	
		cruds.push(Crud.init(model, checkerModule))

		cruds[cruds.length - 1].makeCreate()
		cruds[cruds.length - 1].makeList()
		cruds[cruds.length - 1].makeUpdate()
		cruds[cruds.length - 1].makeListOne()
		cruds[cruds.length - 1].makeDelete()
	}
}
