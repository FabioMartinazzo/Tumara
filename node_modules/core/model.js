var config = require('./config')
var utilities = require('./utilities')
var selfws = require('../webservice/selfwebservice')
var privilege = require('../privilege/privilege')
var privByPass = require('../privilege/privbypass')
var following = require('./following')
var rollback = require('./rollback')
var logger = require('./logger')
var crudhandler = require('./crudhandler')
var clone = require('clone')

var Crud = {
	model : null,
	app : null, 
	modelObj : null,
	checkerObj : null, 

	init : function(model, checker) {
		this.model = model
		this.app = config.getConfiguration().getApp()

		this.modelObj = config.getConfiguration().getPersistence().getModel(model)

		if (checker != null)
			this.checkerObj = checker.getChecker()

		return clone(this)
	},

	isValidProperty : function(property) {
		return ((property != 'usuario') && (property != 'senha') && (property != 'follower'))
	},

	assignPropertys : function(obj, webObj) {
		for (var property in webObj) {
                        if (webObj.hasOwnProperty(property)) {
				if (this.isValidProperty(property))
	                                obj[property] = webObj[property]
                        }
                }
	},

	doTheSave : function(codeError, req, res, obj, that, usuario, crud) {

		var reflection = req.body

		if (crud == 'create') 
			reflection = req.body.criar
		else if (crud == 'update') 
			reflection = req.body.editar

		that.assignPropertys(obj, reflection)

		//var that = this
		var tmpObj = obj
		following.makeObjFollower(tmpObj, following.getCurrent(req))
		utilities.setIP(tmpObj, req.connection.remoteAddress)

		return privilege.isSuficient(tmpObj, that.model, crud, usuario, function(resPriv) {

			if (resPriv.error != undefined) {
				return res.send(resPriv)
			}
			
			return obj.save(function (err) {

				if (!err) {
					//obj.body = { }
				
					return logger.saveAccessLog(req, 'Entidade ' + that.model + ' salva com sucesso.', function() {
						return res.send(obj)
					})
				
				} else {
					return logger.saveErrorLog(req, 'Falha ao salvar um elemento da entidade ' + 
								   that.model + ' Erro : ' + err, function() {
						if (rollback.getRollback(req.body) == undefined) 
							return res.send(require('../error/error').dispatch(codeError, err))

						return selfws.get(rollback.getRollback(req.body).getEntity(), 'delete', 
						       { usuario : rollback.getRollback(req.body).getUsuario(), 
							 senha : rollback.getRollback(req.body).getSenha(), 
							 body : { follower : following.getCurrent(req) } }, 
							function(resWeb) {
								if (resWeb.error == undefined) {
									return logger.saveAccessLog(req, 'Rollback da entidade ' + that.model + ' de id: ' + 
											     	    rollback.getRollback(req.body).getId() + 
												    ' executado com sucesso.', function() {
										return res.send(require('../error/error').dispatch(codeError, err))
									})
								}
								return logger.saveErrorLog(req, 'Não foi possível executar um rollback na entidade ' + 
											   rollback.getRollback(req.body).getEntity() + ' de id: ' + 
											   rollback.getRollback(req.body).getId() + ' Erro : ' + 
											   resWeb.error, function() {
									return res.send(require('../error/error').dispatch(codeError, resWeb))
								})
						}, rollback.getRollback(req.body).getId())
					})
				}
			})
			
		})
	},

	doDelete : function(codeError, req, res, obj, that, usuario) {

		var tmpObj = obj
		following.makeObjFollower(tmpObj, following.getCurrent(req))
		utilities.setIP(tmpObj, req.connection.remoteAddress)

		return privilege.isSuficient(tmpObj, that.model, 'delete', usuario, function(resPriv) {
			if (resPriv.error != undefined) {
				return res.send(resPriv)
			}

			return obj.remove(function (err) {
				if (!err) {
					return logger.saveAccessLog(req, 'Entidade ' + that.model + ' deletada com sucesso.', function() {
						return res.send({ success : 1 })
					})
				} else {
					return logger.saveErrorLog(req, 'Falha ao deletar um elemento da entidade ' + 
								   that.model + ' Erro : ' + err, function() {
						return res.send(require('../error/error').dispatch(codeError, err))
					})
				}
			})
		})
	},

	getTheList : function(codeError, obj, res, usuario) {

		var follower = following.getCurrent(obj.body)
		following.removeFollower(obj.body)

		var connection = obj.body.connection;

		delete obj.body.connection;
		delete obj.body.usuario;
		delete obj.body.senha;		

		delete obj.body.body;

		if (obj.body.filtro != undefined)
			obj.body = obj.body.filtro

		var that = this

		return this.modelObj.find(obj.body, function (err, objs) {

			if (!err) {
				following.makeObjFollower(obj.body, follower)
				
				utilities.setIP(obj.body, connection)

				return privilege.isSuficient(obj.body, that.model, 'list', usuario, function(resPriv) {

					if (resPriv.isList) {

						delete resPriv.isList

						return logger.saveAccessLog(resPriv, 'Entidade ' + that.model + ' listada com sucesso.', function() {
							following.makeObjFollower(resPriv, that.model)

							return res.send(resPriv)
						})
					}

					if (resPriv.error != undefined)
						return res.send(resPriv)

					resPriv.connection = { } 
					utilities.setIP(resPriv, obj.connection.remoteAddress)
					
					return logger.saveAccessLog(resPriv, 'Entidade ' + that.model + ' listada com sucesso.', function() {
						following.makeObjFollower(resPriv, that.model)

						return res.send(objs)
					})					
				}, objs)
			} else {
				return logger.saveErrorLog(undefined, 'Falha ao buscar listagem da entidade ' + 
							   that.model + ' Erro : ' + err, function() {
					return res.send(require('../error/error').dispatch(codeError, err))
				})
			}
		})
	},

	getListOne : function(codeError, req, res, usuario) {

		var that = this

		return this.modelObj.findById(req.params.id, function (err, obj) {

			if (!err) {
				//obj.body = { }

				following.makeObjFollower(obj, following.getCurrent(req))
				utilities.setIP(obj, req.connection.remoteAddress)

				return privilege.isSuficient(obj, that.model, 'listone', usuario, function(resPriv) {

					if ((resPriv == null) || (resPriv == undefined))
						resPriv = {}

					if (resPriv.error != undefined)
						return res.send(resPriv)

					//utilities.setIP(resPriv, req.connection.remoteAddress)
					return logger.saveAccessLog(resPriv, 'Entidade ' + that.model + 
								    ' listada um elemento com sucesso.', function() {
						//following.makeObjFollower(resPriv, that.model)
						return res.send(resPriv)
					})
				})
			} else {
				return logger.saveErrorLog(req, 'Falha ao buscar um elemento da entidade ' + 
							   that.model, function() {
					return res.send(require('../error/error').dispatch(codeError, err))
				})
			}
		})
	},

	privWrapper : function(req, res, crud, callback) {

		var that = this

		return logger.saveAccessLog(req, 'Verificando login e senha', function(){

			var usuario = (req.body.usuario == undefined) ? ((req.body.local == undefined) ? '' : req.body.local.email) : req.body.usuario
			var senha = (req.body.senha == undefined) ? ((req.body.local == undefined) ? '' : req.body.local.password) : req.body.senha

			following.makeGlobalFollower(that.model)

			if (utilities.isArrayInsideArray(privByPass.getAll(), [that.model, crud, following.getCurrent(req)])) {
				return logger.saveAccessLog(req, 'Login e senha desnecessários para este acesso', function() {
					//return callback(usuario)

					var userP = { 'local.email' : usuario }
					
					return that.modelObj.find(userP, function (err, objs) {

						if (err != undefined)
							return callback(err)
						else {
							var res = objs[0]
							if (objs.length > 0) {
								var tmpReturn = { _id : res._id, usuario : usuario, senha : senha }
								return callback(tmpReturn)
								//return callback(res)
							} else {
								return callback(require('../error/error').dispatch(5, undefined))
							}
						}
					})
				})
			}

			var userParam = { local : { email : usuario, password : senha } }

			following.makeObjFollower(userParam, that.model)
			utilities.setIP(userParam, req.connection.remoteAddress)

			return privilege.isValid(userParam, 
						 that.model, crud, function(resPriv) {
				if (resPriv.error != undefined) {
					return res.send(require('../error/error').dispatch(1, resPriv))
				}

				var tmpReturn = { _id : resPriv._id, usuario : usuario, senha : senha }
				return callback(tmpReturn)
				//return callback(resPriv)
				//return callback(req.body)
			})	
		})
	},

	getOnePreparedWrapper : function(req, res, callback, codeError, usuario, crud) {

		var postData = { usuario : req.body.usuario, senha : req.body.senha, body : { follower : following.getCurrent(req) } }

		var that = this
		return selfws.get(this.model, 'listone', postData, function(resWeb) {
			resWeb = JSON.parse(resWeb)

			if (resWeb.error != undefined) 
				return res.send(require('../error/error').dispatch(8, resWeb)) 

			return that.modelObj.findById(resWeb._id, function (err, obj) {
				return callback(codeError, req, res, obj, that, usuario, crud) 
			})
		}, req.params.id)
	},

	updateWrapper : function (req, res, usuario) {
		return this.getOnePreparedWrapper(req, res, this.doTheSave, 7, usuario, 'update')
	},

	deleteWrapper : function (req, res, usuario) {
		return this.getOnePreparedWrapper(req, res, this.doDelete, 10, usuario) 
	},

	makeACrud : function(crudKind, callback) {
		var that = this

		var crudStrut = crudhandler.getCrudStrut(crudKind)

		this.app.post(config.getConfiguration().getPrefix() + this.model + crudStrut.urlParam, function (req, res) { 

			following.makeObjFollower(req, following.getGlobalCurrent())

			return logger.saveAccessLog(req, crudStrut.accessLogMsg + that.model, function() {

				return that.privWrapper(req, res, crudStrut.name, function(usuario) {

					var checker = eval('that.checkerObj.' + crudStrut.checkerName)

					if ((that.checkerObj == null) || (checker == undefined)) {
						following.makeGlobalFollower(undefined)
						return callback(req, res, usuario)
					}

					return logger.saveAccessLog(req, 'Verificando regras de negócio para entidade ' + that.model + 
								         ' crud ' + crudStrut.name, function() {

						following.makeGlobalFollower(that.model)

						req.body.params = res.req.params
						
						return checker(req.body, function(resCheck) {

							delete req.body.params
						
							if ((resCheck != undefined) && (resCheck.error != undefined)) {
								return logger.saveErrorLog(req, 'Erro nas regras de negócio para entidade ' +
											   that.model +  ' crud ' + crudStrut.name, function() {
									following.makeGlobalFollower(undefined)
									return res.send(require('../error/error').dispatch(2, resCheck))
								})
							}

							return logger.saveAccessLog(req, 'Passou nas regras de negócio para entidade ' + that.model + 
									                 ' crud ' + crudStrut.name, function() {
								following.makeGlobalFollower(undefined)

								return callback(req, res, usuario)
							})
						})
					})
				})
			})
		})
	},

	makeCreate : function() {
		var that = this

		this.makeACrud('create', function(req, res, usuario) {
			return that.doTheSave(3, req, res, new that.modelObj(), that, usuario, 'create')
		})
	},

	makeList: function() {
		var that = this

		this.makeACrud('list', function(req, res, usuario) {
			return that.getTheList(6, req, res, usuario)
		})
	},

	makeUpdate : function() {
		var that = this

		this.makeACrud('update', function(req, res, usuario) {
			return that.updateWrapper(req, res, usuario)
		})
	},

	makeListOne : function() {
		var that = this

		this.makeACrud('listone', function(req, res, usuario) {
			return that.getListOne(9, req, res, usuario)
		})
	},

	makeDelete : function() {
		var that = this

		this.makeACrud('delete', function(req, res, usuario) {
			return that.deleteWrapper(req, res, usuario)
		})
	}

}

var cruds

module.exports = {
	makeCrud : function(model, isUserEntity) {
		var checkerObj
		try {
			var checkerModule = require.main.require('./model/' + model)
		} catch(e) {
			checkerModule = null
		}

		if (cruds == undefined)
			cruds = []

		if (isUserEntity)
			config.setUserEntity(model)
	
		cruds.push(Crud.init(model, checkerModule))

		cruds[cruds.length - 1].makeCreate()
		cruds[cruds.length - 1].makeList()
		cruds[cruds.length - 1].makeUpdate()
		cruds[cruds.length - 1].makeListOne()
		cruds[cruds.length - 1].makeDelete()
	}
}

